// Code generated by go-swagger; DO NOT EDIT.

package organisations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new organisations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for organisations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetOrganisations lists all organisations
*/
func (a *Client) GetOrganisations(params *GetOrganisationsParams) (*GetOrganisationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganisationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOrganisations",
		Method:             "GET",
		PathPattern:        "/organisations",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganisationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganisationsOK), nil

}

/*
GetOrganisationsID fetches organisation
*/
func (a *Client) GetOrganisationsID(params *GetOrganisationsIDParams) (*GetOrganisationsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganisationsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOrganisationsID",
		Method:             "GET",
		PathPattern:        "/organisations/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganisationsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganisationsIDOK), nil

}

/*
PatchOrganisationsID updates organisation
*/
func (a *Client) PatchOrganisationsID(params *PatchOrganisationsIDParams) (*PatchOrganisationsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchOrganisationsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchOrganisationsID",
		Method:             "PATCH",
		PathPattern:        "/organisations/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchOrganisationsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchOrganisationsIDOK), nil

}

/*
PostOrganisations creates organisation
*/
func (a *Client) PostOrganisations(params *PostOrganisationsParams) (*PostOrganisationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOrganisationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostOrganisations",
		Method:             "POST",
		PathPattern:        "/organisations",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOrganisationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOrganisationsCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
