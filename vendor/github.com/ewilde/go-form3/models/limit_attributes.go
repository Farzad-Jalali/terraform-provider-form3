// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LimitAttributes limit attributes
// swagger:model limitAttributes
type LimitAttributes struct {

	// amount
	// Pattern: ^[0-9.]{0,20}$
	Amount string `json:"amount,omitempty"`

	// gateway
	// Pattern: ^[A-Za-z_\-]*$
	Gateway string `json:"gateway,omitempty"`

	// scheme
	// Pattern: ^[A-Za-z_\-]*$
	Scheme string `json:"scheme,omitempty"`

	// settlement cycle type
	SettlementCycleType SettlementCycleType `json:"settlement_cycle_type,omitempty"`
}

// Validate validates this limit attributes
func (m *LimitAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGateway(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateScheme(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSettlementCycleType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LimitAttributes) validateAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.Amount) { // not required
		return nil
	}

	if err := validate.Pattern("amount", "body", string(m.Amount), `^[0-9.]{0,20}$`); err != nil {
		return err
	}

	return nil
}

func (m *LimitAttributes) validateGateway(formats strfmt.Registry) error {

	if swag.IsZero(m.Gateway) { // not required
		return nil
	}

	if err := validate.Pattern("gateway", "body", string(m.Gateway), `^[A-Za-z_\-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LimitAttributes) validateScheme(formats strfmt.Registry) error {

	if swag.IsZero(m.Scheme) { // not required
		return nil
	}

	if err := validate.Pattern("scheme", "body", string(m.Scheme), `^[A-Za-z_\-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LimitAttributes) validateSettlementCycleType(formats strfmt.Registry) error {

	if swag.IsZero(m.SettlementCycleType) { // not required
		return nil
	}

	if err := m.SettlementCycleType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("settlement_cycle_type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LimitAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LimitAttributes) UnmarshalBinary(b []byte) error {
	var res LimitAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
