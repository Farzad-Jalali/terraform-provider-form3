// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PositionAttributes position attributes
// swagger:model positionAttributes
type PositionAttributes struct {

	// limit
	// Pattern: ^[0-9.]{0,20}$
	Limit string `json:"limit,omitempty"`

	// position
	// Pattern: ^[0-9.]{0,20}$
	Position string `json:"position,omitempty"`

	// scheme
	// Pattern: ^[A-Za-z_\-]*$
	Scheme string `json:"scheme,omitempty"`
}

// Validate validates this position attributes
func (m *PositionAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLimit(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateScheme(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PositionAttributes) validateLimit(formats strfmt.Registry) error {

	if swag.IsZero(m.Limit) { // not required
		return nil
	}

	if err := validate.Pattern("limit", "body", string(m.Limit), `^[0-9.]{0,20}$`); err != nil {
		return err
	}

	return nil
}

func (m *PositionAttributes) validatePosition(formats strfmt.Registry) error {

	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if err := validate.Pattern("position", "body", string(m.Position), `^[0-9.]{0,20}$`); err != nil {
		return err
	}

	return nil
}

func (m *PositionAttributes) validateScheme(formats strfmt.Registry) error {

	if swag.IsZero(m.Scheme) { // not required
		return nil
	}

	if err := validate.Pattern("scheme", "body", string(m.Scheme), `^[A-Za-z_\-]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PositionAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PositionAttributes) UnmarshalBinary(b []byte) error {
	var res PositionAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
