// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuditEntryAttributes audit entry attributes
// swagger:model auditEntryAttributes
type AuditEntryAttributes struct {

	// action time
	ActionTime strfmt.DateTime `json:"action_time,omitempty"`

	// actioned by
	ActionedBy strfmt.UUID `json:"actioned_by,omitempty"`

	// after data
	AfterData interface{} `json:"after_data,omitempty"`

	// before data
	BeforeData interface{} `json:"before_data,omitempty"`

	// description
	// Pattern: ^[A-Za-z0-9 .,@:]*$
	Description string `json:"description,omitempty"`

	// record id
	RecordID strfmt.UUID `json:"record_id,omitempty"`

	// record type
	// Pattern: ^[A-Za-z]*$
	RecordType string `json:"record_type,omitempty"`
}

// Validate validates this audit entry attributes
func (m *AuditEntryAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateActionedBy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRecordID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRecordType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditEntryAttributes) validateActionTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionTime) { // not required
		return nil
	}

	if err := validate.FormatOf("action_time", "body", "date-time", m.ActionTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AuditEntryAttributes) validateActionedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionedBy) { // not required
		return nil
	}

	if err := validate.FormatOf("actioned_by", "body", "uuid", m.ActionedBy.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AuditEntryAttributes) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.Pattern("description", "body", string(m.Description), `^[A-Za-z0-9 .,@:]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AuditEntryAttributes) validateRecordID(formats strfmt.Registry) error {

	if swag.IsZero(m.RecordID) { // not required
		return nil
	}

	if err := validate.FormatOf("record_id", "body", "uuid", m.RecordID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AuditEntryAttributes) validateRecordType(formats strfmt.Registry) error {

	if swag.IsZero(m.RecordType) { // not required
		return nil
	}

	if err := validate.Pattern("record_type", "body", string(m.RecordType), `^[A-Za-z]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuditEntryAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditEntryAttributes) UnmarshalBinary(b []byte) error {
	var res AuditEntryAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
