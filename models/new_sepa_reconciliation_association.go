// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewSepaReconciliationAssociation new sepa reconciliation association
// swagger:model NewSepaReconciliationAssociation
type NewSepaReconciliationAssociation struct {

	// attributes
	// Required: true
	Attributes *SepaReconciliationAssociationAttributes `json:"attributes"`

	// id
	// Required: true
	// Format: uuid
	ID strfmt.UUID `json:"id"`

	// organisation id
	// Required: true
	// Format: uuid
	OrganisationID strfmt.UUID `json:"organisation_id"`

	// relationships
	Relationships *SepaReconciliationAssociationRelationships `json:"relationships,omitempty"`

	// type
	// Required: true
	// Enum: [separeconciliation_associations]
	Type string `json:"type"`
}

// Validate validates this new sepa reconciliation association
func (m *NewSepaReconciliationAssociation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewSepaReconciliationAssociation) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("attributes", "body", m.Attributes); err != nil {
		return err
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *NewSepaReconciliationAssociation) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NewSepaReconciliationAssociation) validateOrganisationID(formats strfmt.Registry) error {

	if err := validate.Required("organisation_id", "body", strfmt.UUID(m.OrganisationID)); err != nil {
		return err
	}

	if err := validate.FormatOf("organisation_id", "body", "uuid", m.OrganisationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NewSepaReconciliationAssociation) validateRelationships(formats strfmt.Registry) error {

	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	if m.Relationships != nil {
		if err := m.Relationships.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

var newSepaReconciliationAssociationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["separeconciliation_associations"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		newSepaReconciliationAssociationTypeTypePropEnum = append(newSepaReconciliationAssociationTypeTypePropEnum, v)
	}
}

const (

	// NewSepaReconciliationAssociationTypeSepareconciliationAssociations captures enum value "separeconciliation_associations"
	NewSepaReconciliationAssociationTypeSepareconciliationAssociations string = "separeconciliation_associations"
)

// prop value enum
func (m *NewSepaReconciliationAssociation) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, newSepaReconciliationAssociationTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NewSepaReconciliationAssociation) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewSepaReconciliationAssociation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewSepaReconciliationAssociation) UnmarshalBinary(b []byte) error {
	var res NewSepaReconciliationAssociation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
