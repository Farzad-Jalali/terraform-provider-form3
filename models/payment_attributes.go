// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentAttributes payment attributes
// swagger:model paymentAttributes
type PaymentAttributes struct {

	// amount
	// Pattern: ^[0-9.]{0,20}$
	Amount string `json:"amount,omitempty"`

	// batch booking indicator
	BatchBookingIndicator string `json:"batch_booking_indicator,omitempty"`

	// batch id
	BatchID string `json:"batch_id,omitempty"`

	// batch type
	BatchType string `json:"batch_type,omitempty"`

	// beneficiary party
	BeneficiaryParty *PaymentAttributesBeneficiaryParty `json:"beneficiary_party,omitempty"`

	// category purpose
	CategoryPurpose string `json:"category_purpose,omitempty"`

	// category purpose coded
	CategoryPurposeCoded string `json:"category_purpose_coded,omitempty"`

	// charges information
	ChargesInformation *ChargesInformation `json:"charges_information,omitempty"`

	// clearing id
	ClearingID string `json:"clearing_id,omitempty"`

	// currency
	Currency string `json:"currency,omitempty"`

	// debtor party
	DebtorParty *PaymentAttributesDebtorParty `json:"debtor_party,omitempty"`

	// end to end reference
	EndToEndReference string `json:"end_to_end_reference,omitempty"`

	// file number
	FileNumber string `json:"file_number,omitempty"`

	// fx
	Fx *PaymentAttributesFx `json:"fx,omitempty"`

	// intermediary bank
	IntermediaryBank *AccountHoldingEntity `json:"intermediary_bank,omitempty"`

	// numeric reference
	NumericReference string `json:"numeric_reference,omitempty"`

	// payment acceptance datetime
	PaymentAcceptanceDatetime strfmt.DateTime `json:"payment_acceptance_datetime,omitempty"`

	// payment instructing id
	PaymentInstructingID string `json:"payment_instructing_id,omitempty"`

	// payment purpose
	PaymentPurpose string `json:"payment_purpose,omitempty"`

	// payment purpose coded
	PaymentPurposeCoded string `json:"payment_purpose_coded,omitempty"`

	// payment scheme
	PaymentScheme string `json:"payment_scheme,omitempty"`

	// payment type
	PaymentType string `json:"payment_type,omitempty"`

	// processing date
	ProcessingDate strfmt.Date `json:"processing_date,omitempty"`

	// receivers correspondent
	ReceiversCorrespondent *AccountHoldingEntity `json:"receivers_correspondent,omitempty"`

	// reference
	Reference string `json:"reference,omitempty"`

	// regulatory reporting
	RegulatoryReporting string `json:"regulatory_reporting,omitempty"`

	// reimbursement
	Reimbursement *AccountHoldingEntity `json:"reimbursement,omitempty"`

	// remittance information
	RemittanceInformation string `json:"remittance_information,omitempty"`

	// scheme payment sub type
	SchemePaymentSubType string `json:"scheme_payment_sub_type,omitempty"`

	// scheme payment type
	SchemePaymentType string `json:"scheme_payment_type,omitempty"`

	// scheme status code
	SchemeStatusCode string `json:"scheme_status_code,omitempty"`

	// scheme transaction id
	SchemeTransactionID string `json:"scheme_transaction_id,omitempty"`

	// senders correspondent
	SendersCorrespondent *AccountHoldingEntity `json:"senders_correspondent,omitempty"`

	// structured reference
	StructuredReference *PaymentAttributesStructuredReference `json:"structured_reference,omitempty"`

	// swift
	Swift *PaymentAttributesSwift `json:"swift,omitempty"`

	// ultimate beneficiary
	UltimateBeneficiary *UltimateEntity `json:"ultimate_beneficiary,omitempty"`

	// ultimate debtor
	UltimateDebtor *UltimateEntity `json:"ultimate_debtor,omitempty"`

	// unique scheme id
	UniqueSchemeID string `json:"unique_scheme_id,omitempty"`
}

// Validate validates this payment attributes
func (m *PaymentAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBeneficiaryParty(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateChargesInformation(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDebtorParty(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFx(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIntermediaryBank(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePaymentAcceptanceDatetime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProcessingDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReceiversCorrespondent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReimbursement(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSendersCorrespondent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStructuredReference(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSwift(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUltimateBeneficiary(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUltimateDebtor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentAttributes) validateAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.Amount) { // not required
		return nil
	}

	if err := validate.Pattern("amount", "body", string(m.Amount), `^[0-9.]{0,20}$`); err != nil {
		return err
	}

	return nil
}

func (m *PaymentAttributes) validateBeneficiaryParty(formats strfmt.Registry) error {

	if swag.IsZero(m.BeneficiaryParty) { // not required
		return nil
	}

	if m.BeneficiaryParty != nil {

		if err := m.BeneficiaryParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("beneficiary_party")
			}
			return err
		}

	}

	return nil
}

func (m *PaymentAttributes) validateChargesInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.ChargesInformation) { // not required
		return nil
	}

	if m.ChargesInformation != nil {

		if err := m.ChargesInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("charges_information")
			}
			return err
		}

	}

	return nil
}

func (m *PaymentAttributes) validateDebtorParty(formats strfmt.Registry) error {

	if swag.IsZero(m.DebtorParty) { // not required
		return nil
	}

	if m.DebtorParty != nil {

		if err := m.DebtorParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("debtor_party")
			}
			return err
		}

	}

	return nil
}

func (m *PaymentAttributes) validateFx(formats strfmt.Registry) error {

	if swag.IsZero(m.Fx) { // not required
		return nil
	}

	if m.Fx != nil {

		if err := m.Fx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fx")
			}
			return err
		}

	}

	return nil
}

func (m *PaymentAttributes) validateIntermediaryBank(formats strfmt.Registry) error {

	if swag.IsZero(m.IntermediaryBank) { // not required
		return nil
	}

	if m.IntermediaryBank != nil {

		if err := m.IntermediaryBank.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("intermediary_bank")
			}
			return err
		}

	}

	return nil
}

func (m *PaymentAttributes) validatePaymentAcceptanceDatetime(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentAcceptanceDatetime) { // not required
		return nil
	}

	if err := validate.FormatOf("payment_acceptance_datetime", "body", "date-time", m.PaymentAcceptanceDatetime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentAttributes) validateProcessingDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessingDate) { // not required
		return nil
	}

	if err := validate.FormatOf("processing_date", "body", "date", m.ProcessingDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentAttributes) validateReceiversCorrespondent(formats strfmt.Registry) error {

	if swag.IsZero(m.ReceiversCorrespondent) { // not required
		return nil
	}

	if m.ReceiversCorrespondent != nil {

		if err := m.ReceiversCorrespondent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("receivers_correspondent")
			}
			return err
		}

	}

	return nil
}

func (m *PaymentAttributes) validateReimbursement(formats strfmt.Registry) error {

	if swag.IsZero(m.Reimbursement) { // not required
		return nil
	}

	if m.Reimbursement != nil {

		if err := m.Reimbursement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reimbursement")
			}
			return err
		}

	}

	return nil
}

func (m *PaymentAttributes) validateSendersCorrespondent(formats strfmt.Registry) error {

	if swag.IsZero(m.SendersCorrespondent) { // not required
		return nil
	}

	if m.SendersCorrespondent != nil {

		if err := m.SendersCorrespondent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("senders_correspondent")
			}
			return err
		}

	}

	return nil
}

func (m *PaymentAttributes) validateStructuredReference(formats strfmt.Registry) error {

	if swag.IsZero(m.StructuredReference) { // not required
		return nil
	}

	if m.StructuredReference != nil {

		if err := m.StructuredReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("structured_reference")
			}
			return err
		}

	}

	return nil
}

func (m *PaymentAttributes) validateSwift(formats strfmt.Registry) error {

	if swag.IsZero(m.Swift) { // not required
		return nil
	}

	if m.Swift != nil {

		if err := m.Swift.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("swift")
			}
			return err
		}

	}

	return nil
}

func (m *PaymentAttributes) validateUltimateBeneficiary(formats strfmt.Registry) error {

	if swag.IsZero(m.UltimateBeneficiary) { // not required
		return nil
	}

	if m.UltimateBeneficiary != nil {

		if err := m.UltimateBeneficiary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ultimate_beneficiary")
			}
			return err
		}

	}

	return nil
}

func (m *PaymentAttributes) validateUltimateDebtor(formats strfmt.Registry) error {

	if swag.IsZero(m.UltimateDebtor) { // not required
		return nil
	}

	if m.UltimateDebtor != nil {

		if err := m.UltimateDebtor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ultimate_debtor")
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentAttributes) UnmarshalBinary(b []byte) error {
	var res PaymentAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
