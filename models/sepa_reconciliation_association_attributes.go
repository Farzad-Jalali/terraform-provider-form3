// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SepaReconciliationAssociationAttributes sepa reconciliation association attributes
// swagger:model SepaReconciliationAssociationAttributes
type SepaReconciliationAssociationAttributes struct {

	// address
	// Required: true
	Address SepaReconciliationAssociationAttributesAddress `json:"address"`

	// bic
	// Required: true
	// Min Length: 1
	Bic string `json:"bic"`

	// iban
	// Required: true
	// Min Length: 1
	Iban string `json:"iban"`

	// name
	// Required: true
	// Min Length: 1
	Name string `json:"name"`
}

// Validate validates this sepa reconciliation association attributes
func (m *SepaReconciliationAssociationAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIban(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SepaReconciliationAssociationAttributes) validateAddress(formats strfmt.Registry) error {

	if err := m.Address.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("address")
		}
		return err
	}

	return nil
}

func (m *SepaReconciliationAssociationAttributes) validateBic(formats strfmt.Registry) error {

	if err := validate.RequiredString("bic", "body", string(m.Bic)); err != nil {
		return err
	}

	if err := validate.MinLength("bic", "body", string(m.Bic), 1); err != nil {
		return err
	}

	return nil
}

func (m *SepaReconciliationAssociationAttributes) validateIban(formats strfmt.Registry) error {

	if err := validate.RequiredString("iban", "body", string(m.Iban)); err != nil {
		return err
	}

	if err := validate.MinLength("iban", "body", string(m.Iban), 1); err != nil {
		return err
	}

	return nil
}

func (m *SepaReconciliationAssociationAttributes) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(m.Name), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SepaReconciliationAssociationAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SepaReconciliationAssociationAttributes) UnmarshalBinary(b []byte) error {
	var res SepaReconciliationAssociationAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SepaReconciliationAssociationAttributesAddress sepa reconciliation association attributes address
// swagger:model SepaReconciliationAssociationAttributesAddress
type SepaReconciliationAssociationAttributesAddress struct {

	// building number
	// Required: true
	// Max Length: 16
	// Min Length: 1
	BuildingNumber string `json:"building_number"`

	// city
	// Required: true
	// Max Length: 35
	// Min Length: 1
	City string `json:"city"`

	// country
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Country string `json:"country"`

	// street
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Street string `json:"street"`
}

// Validate validates this sepa reconciliation association attributes address
func (m *SepaReconciliationAssociationAttributesAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildingNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SepaReconciliationAssociationAttributesAddress) validateBuildingNumber(formats strfmt.Registry) error {

	if err := validate.RequiredString("address"+"."+"building_number", "body", string(m.BuildingNumber)); err != nil {
		return err
	}

	if err := validate.MinLength("address"+"."+"building_number", "body", string(m.BuildingNumber), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("address"+"."+"building_number", "body", string(m.BuildingNumber), 16); err != nil {
		return err
	}

	return nil
}

func (m *SepaReconciliationAssociationAttributesAddress) validateCity(formats strfmt.Registry) error {

	if err := validate.RequiredString("address"+"."+"city", "body", string(m.City)); err != nil {
		return err
	}

	if err := validate.MinLength("address"+"."+"city", "body", string(m.City), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("address"+"."+"city", "body", string(m.City), 35); err != nil {
		return err
	}

	return nil
}

func (m *SepaReconciliationAssociationAttributesAddress) validateCountry(formats strfmt.Registry) error {

	if err := validate.RequiredString("address"+"."+"country", "body", string(m.Country)); err != nil {
		return err
	}

	if err := validate.MinLength("address"+"."+"country", "body", string(m.Country), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("address"+"."+"country", "body", string(m.Country), 70); err != nil {
		return err
	}

	return nil
}

func (m *SepaReconciliationAssociationAttributesAddress) validateStreet(formats strfmt.Registry) error {

	if err := validate.RequiredString("address"+"."+"street", "body", string(m.Street)); err != nil {
		return err
	}

	if err := validate.MinLength("address"+"."+"street", "body", string(m.Street), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("address"+"."+"street", "body", string(m.Street), 70); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SepaReconciliationAssociationAttributesAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SepaReconciliationAssociationAttributesAddress) UnmarshalBinary(b []byte) error {
	var res SepaReconciliationAssociationAttributesAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
