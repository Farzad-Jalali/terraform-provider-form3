// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SepaReconciliationAssociationAttributes sepa reconciliation association attributes
// swagger:model SepaReconciliationAssociationAttributes
type SepaReconciliationAssociationAttributes struct {

	// bic
	// Required: true
	// Min Length: 1
	Bic string `json:"bic"`

	// country
	// Min Length: 1
	Country string `json:"country,omitempty"`

	// iban
	// Min Length: 1
	Iban string `json:"iban,omitempty"`

	// name
	// Min Length: 1
	Name string `json:"name,omitempty"`
}

// Validate validates this sepa reconciliation association attributes
func (m *SepaReconciliationAssociationAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIban(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SepaReconciliationAssociationAttributes) validateBic(formats strfmt.Registry) error {

	if err := validate.RequiredString("bic", "body", string(m.Bic)); err != nil {
		return err
	}

	if err := validate.MinLength("bic", "body", string(m.Bic), 1); err != nil {
		return err
	}

	return nil
}

func (m *SepaReconciliationAssociationAttributes) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if err := validate.MinLength("country", "body", string(m.Country), 1); err != nil {
		return err
	}

	return nil
}

func (m *SepaReconciliationAssociationAttributes) validateIban(formats strfmt.Registry) error {

	if swag.IsZero(m.Iban) { // not required
		return nil
	}

	if err := validate.MinLength("iban", "body", string(m.Iban), 1); err != nil {
		return err
	}

	return nil
}

func (m *SepaReconciliationAssociationAttributes) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", string(m.Name), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SepaReconciliationAssociationAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SepaReconciliationAssociationAttributes) UnmarshalBinary(b []byte) error {
	var res SepaReconciliationAssociationAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
