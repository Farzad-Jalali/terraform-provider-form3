// Code generated by go-swagger; DO NOT EDIT.

package associations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new associations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for associations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAssociationsID deletes organisation association
*/
func (a *Client) DeleteAssociationsID(params *DeleteAssociationsIDParams) (*DeleteAssociationsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAssociationsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAssociationsID",
		Method:             "DELETE",
		PathPattern:        "/associations/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAssociationsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAssociationsIDNoContent), nil

}

/*
GetAssociations lists all organisation associations
*/
func (a *Client) GetAssociations(params *GetAssociationsParams) (*GetAssociationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssociationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAssociations",
		Method:             "GET",
		PathPattern:        "/associations",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAssociationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAssociationsOK), nil

}

/*
GetAssociationsID fetches organisation association
*/
func (a *Client) GetAssociationsID(params *GetAssociationsIDParams) (*GetAssociationsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssociationsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAssociationsID",
		Method:             "GET",
		PathPattern:        "/associations/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAssociationsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAssociationsIDOK), nil

}

/*
PostAssociations creates organisation association
*/
func (a *Client) PostAssociations(params *PostAssociationsParams) (*PostAssociationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAssociationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAssociations",
		Method:             "POST",
		PathPattern:        "/associations",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAssociationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAssociationsCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
