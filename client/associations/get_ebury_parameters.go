// Code generated by go-swagger; DO NOT EDIT.

package associations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetEburyParams creates a new GetEburyParams object
// with the default values initialized.
func NewGetEburyParams() *GetEburyParams {
	var ()
	return &GetEburyParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetEburyParamsWithTimeout creates a new GetEburyParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetEburyParamsWithTimeout(timeout time.Duration) *GetEburyParams {
	var ()
	return &GetEburyParams{

		timeout: timeout,
	}
}

// NewGetEburyParamsWithContext creates a new GetEburyParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetEburyParamsWithContext(ctx context.Context) *GetEburyParams {
	var ()
	return &GetEburyParams{

		Context: ctx,
	}
}

// NewGetEburyParamsWithHTTPClient creates a new GetEburyParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetEburyParamsWithHTTPClient(client *http.Client) *GetEburyParams {
	var ()
	return &GetEburyParams{
		HTTPClient: client,
	}
}

/*GetEburyParams contains all the parameters to send to the API endpoint
for the get ebury operation typically these are written to a http.Request
*/
type GetEburyParams struct {

	/*FilterOrganisationID
	  Organisation id

	*/
	FilterOrganisationID []strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get ebury params
func (o *GetEburyParams) WithTimeout(timeout time.Duration) *GetEburyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get ebury params
func (o *GetEburyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get ebury params
func (o *GetEburyParams) WithContext(ctx context.Context) *GetEburyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get ebury params
func (o *GetEburyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get ebury params
func (o *GetEburyParams) WithHTTPClient(client *http.Client) *GetEburyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get ebury params
func (o *GetEburyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilterOrganisationID adds the filterOrganisationID to the get ebury params
func (o *GetEburyParams) WithFilterOrganisationID(filterOrganisationID []strfmt.UUID) *GetEburyParams {
	o.SetFilterOrganisationID(filterOrganisationID)
	return o
}

// SetFilterOrganisationID adds the filterOrganisationId to the get ebury params
func (o *GetEburyParams) SetFilterOrganisationID(filterOrganisationID []strfmt.UUID) {
	o.FilterOrganisationID = filterOrganisationID
}

// WriteToRequest writes these params to a swagger request
func (o *GetEburyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	var valuesFilterOrganisationID []string
	for _, v := range o.FilterOrganisationID {
		valuesFilterOrganisationID = append(valuesFilterOrganisationID, v.String())
	}

	joinedFilterOrganisationID := swag.JoinByFormat(valuesFilterOrganisationID, "")
	// query array param filter[organisation_id]
	if err := r.SetQueryParam("filter[organisation_id]", joinedFilterOrganisationID...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
