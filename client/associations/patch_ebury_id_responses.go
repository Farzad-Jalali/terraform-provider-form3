// Code generated by go-swagger; DO NOT EDIT.

package associations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/terraform-provider-form3/models"
)

// PatchEburyIDReader is a Reader for the PatchEburyID structure.
type PatchEburyIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchEburyIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchEburyIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchEburyIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchEburyIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchEburyIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchEburyIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchEburyIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchEburyIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchEburyIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchEburyIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchEburyIDOK creates a PatchEburyIDOK with default headers values
func NewPatchEburyIDOK() *PatchEburyIDOK {
	return &PatchEburyIDOK{}
}

/*PatchEburyIDOK handles this case with default header values.

Association updated successfully
*/
type PatchEburyIDOK struct {
	Payload *models.EburyAssociationResponse
}

func (o *PatchEburyIDOK) Error() string {
	return fmt.Sprintf("[PATCH /ebury/{id}][%d] patchEburyIdOK  %+v", 200, o.Payload)
}

func (o *PatchEburyIDOK) GetPayload() *models.EburyAssociationResponse {
	return o.Payload
}

func (o *PatchEburyIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EburyAssociationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchEburyIDBadRequest creates a PatchEburyIDBadRequest with default headers values
func NewPatchEburyIDBadRequest() *PatchEburyIDBadRequest {
	return &PatchEburyIDBadRequest{}
}

/*PatchEburyIDBadRequest handles this case with default header values.

Bad Request
*/
type PatchEburyIDBadRequest struct {
	Payload *models.APIError
}

func (o *PatchEburyIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /ebury/{id}][%d] patchEburyIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchEburyIDBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PatchEburyIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchEburyIDUnauthorized creates a PatchEburyIDUnauthorized with default headers values
func NewPatchEburyIDUnauthorized() *PatchEburyIDUnauthorized {
	return &PatchEburyIDUnauthorized{}
}

/*PatchEburyIDUnauthorized handles this case with default header values.

Authentication credentials were missing or incorrect
*/
type PatchEburyIDUnauthorized struct {
	Payload *models.APIError
}

func (o *PatchEburyIDUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /ebury/{id}][%d] patchEburyIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchEburyIDUnauthorized) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PatchEburyIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchEburyIDForbidden creates a PatchEburyIDForbidden with default headers values
func NewPatchEburyIDForbidden() *PatchEburyIDForbidden {
	return &PatchEburyIDForbidden{}
}

/*PatchEburyIDForbidden handles this case with default header values.

Forbidden
*/
type PatchEburyIDForbidden struct {
	Payload *models.APIError
}

func (o *PatchEburyIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /ebury/{id}][%d] patchEburyIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchEburyIDForbidden) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PatchEburyIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchEburyIDNotFound creates a PatchEburyIDNotFound with default headers values
func NewPatchEburyIDNotFound() *PatchEburyIDNotFound {
	return &PatchEburyIDNotFound{}
}

/*PatchEburyIDNotFound handles this case with default header values.

Record not found
*/
type PatchEburyIDNotFound struct {
	Payload *models.APIError
}

func (o *PatchEburyIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /ebury/{id}][%d] patchEburyIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchEburyIDNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PatchEburyIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchEburyIDConflict creates a PatchEburyIDConflict with default headers values
func NewPatchEburyIDConflict() *PatchEburyIDConflict {
	return &PatchEburyIDConflict{}
}

/*PatchEburyIDConflict handles this case with default header values.

Conflict
*/
type PatchEburyIDConflict struct {
	Payload *models.APIError
}

func (o *PatchEburyIDConflict) Error() string {
	return fmt.Sprintf("[PATCH /ebury/{id}][%d] patchEburyIdConflict  %+v", 409, o.Payload)
}

func (o *PatchEburyIDConflict) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PatchEburyIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchEburyIDTooManyRequests creates a PatchEburyIDTooManyRequests with default headers values
func NewPatchEburyIDTooManyRequests() *PatchEburyIDTooManyRequests {
	return &PatchEburyIDTooManyRequests{}
}

/*PatchEburyIDTooManyRequests handles this case with default header values.

The request cannot be served due to the applicationâ€™s rate limit
*/
type PatchEburyIDTooManyRequests struct {
	Payload *models.APIError
}

func (o *PatchEburyIDTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /ebury/{id}][%d] patchEburyIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchEburyIDTooManyRequests) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PatchEburyIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchEburyIDInternalServerError creates a PatchEburyIDInternalServerError with default headers values
func NewPatchEburyIDInternalServerError() *PatchEburyIDInternalServerError {
	return &PatchEburyIDInternalServerError{}
}

/*PatchEburyIDInternalServerError handles this case with default header values.

Internal Server Error
*/
type PatchEburyIDInternalServerError struct {
	Payload *models.APIError
}

func (o *PatchEburyIDInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /ebury/{id}][%d] patchEburyIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchEburyIDInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PatchEburyIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchEburyIDServiceUnavailable creates a PatchEburyIDServiceUnavailable with default headers values
func NewPatchEburyIDServiceUnavailable() *PatchEburyIDServiceUnavailable {
	return &PatchEburyIDServiceUnavailable{}
}

/*PatchEburyIDServiceUnavailable handles this case with default header values.

The server is up, but overloaded with requests. Try again later.
*/
type PatchEburyIDServiceUnavailable struct {
	Payload *models.APIError
}

func (o *PatchEburyIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /ebury/{id}][%d] patchEburyIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchEburyIDServiceUnavailable) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PatchEburyIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
