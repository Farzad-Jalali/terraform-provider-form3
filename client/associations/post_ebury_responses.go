// Code generated by go-swagger; DO NOT EDIT.

package associations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/terraform-provider-form3/models"
)

// PostEburyReader is a Reader for the PostEbury structure.
type PostEburyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostEburyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostEburyCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostEburyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostEburyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostEburyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostEburyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostEburyConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostEburyTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostEburyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostEburyServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostEburyCreated creates a PostEburyCreated with default headers values
func NewPostEburyCreated() *PostEburyCreated {
	return &PostEburyCreated{}
}

/*PostEburyCreated handles this case with default header values.

creation response
*/
type PostEburyCreated struct {
	Payload *models.EburyAssociationCreationResponse
}

func (o *PostEburyCreated) Error() string {
	return fmt.Sprintf("[POST /ebury][%d] postEburyCreated  %+v", 201, o.Payload)
}

func (o *PostEburyCreated) GetPayload() *models.EburyAssociationCreationResponse {
	return o.Payload
}

func (o *PostEburyCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EburyAssociationCreationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEburyBadRequest creates a PostEburyBadRequest with default headers values
func NewPostEburyBadRequest() *PostEburyBadRequest {
	return &PostEburyBadRequest{}
}

/*PostEburyBadRequest handles this case with default header values.

Bad Request
*/
type PostEburyBadRequest struct {
	Payload *models.APIError
}

func (o *PostEburyBadRequest) Error() string {
	return fmt.Sprintf("[POST /ebury][%d] postEburyBadRequest  %+v", 400, o.Payload)
}

func (o *PostEburyBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PostEburyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEburyUnauthorized creates a PostEburyUnauthorized with default headers values
func NewPostEburyUnauthorized() *PostEburyUnauthorized {
	return &PostEburyUnauthorized{}
}

/*PostEburyUnauthorized handles this case with default header values.

Authentication credentials were missing or incorrect
*/
type PostEburyUnauthorized struct {
	Payload *models.APIError
}

func (o *PostEburyUnauthorized) Error() string {
	return fmt.Sprintf("[POST /ebury][%d] postEburyUnauthorized  %+v", 401, o.Payload)
}

func (o *PostEburyUnauthorized) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PostEburyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEburyForbidden creates a PostEburyForbidden with default headers values
func NewPostEburyForbidden() *PostEburyForbidden {
	return &PostEburyForbidden{}
}

/*PostEburyForbidden handles this case with default header values.

Forbidden
*/
type PostEburyForbidden struct {
	Payload *models.APIError
}

func (o *PostEburyForbidden) Error() string {
	return fmt.Sprintf("[POST /ebury][%d] postEburyForbidden  %+v", 403, o.Payload)
}

func (o *PostEburyForbidden) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PostEburyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEburyNotFound creates a PostEburyNotFound with default headers values
func NewPostEburyNotFound() *PostEburyNotFound {
	return &PostEburyNotFound{}
}

/*PostEburyNotFound handles this case with default header values.

Record not found
*/
type PostEburyNotFound struct {
	Payload *models.APIError
}

func (o *PostEburyNotFound) Error() string {
	return fmt.Sprintf("[POST /ebury][%d] postEburyNotFound  %+v", 404, o.Payload)
}

func (o *PostEburyNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PostEburyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEburyConflict creates a PostEburyConflict with default headers values
func NewPostEburyConflict() *PostEburyConflict {
	return &PostEburyConflict{}
}

/*PostEburyConflict handles this case with default header values.

Conflict
*/
type PostEburyConflict struct {
	Payload *models.APIError
}

func (o *PostEburyConflict) Error() string {
	return fmt.Sprintf("[POST /ebury][%d] postEburyConflict  %+v", 409, o.Payload)
}

func (o *PostEburyConflict) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PostEburyConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEburyTooManyRequests creates a PostEburyTooManyRequests with default headers values
func NewPostEburyTooManyRequests() *PostEburyTooManyRequests {
	return &PostEburyTooManyRequests{}
}

/*PostEburyTooManyRequests handles this case with default header values.

The request cannot be served due to the applicationâ€™s rate limit
*/
type PostEburyTooManyRequests struct {
	Payload *models.APIError
}

func (o *PostEburyTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /ebury][%d] postEburyTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostEburyTooManyRequests) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PostEburyTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEburyInternalServerError creates a PostEburyInternalServerError with default headers values
func NewPostEburyInternalServerError() *PostEburyInternalServerError {
	return &PostEburyInternalServerError{}
}

/*PostEburyInternalServerError handles this case with default header values.

Internal Server Error
*/
type PostEburyInternalServerError struct {
	Payload *models.APIError
}

func (o *PostEburyInternalServerError) Error() string {
	return fmt.Sprintf("[POST /ebury][%d] postEburyInternalServerError  %+v", 500, o.Payload)
}

func (o *PostEburyInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PostEburyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEburyServiceUnavailable creates a PostEburyServiceUnavailable with default headers values
func NewPostEburyServiceUnavailable() *PostEburyServiceUnavailable {
	return &PostEburyServiceUnavailable{}
}

/*PostEburyServiceUnavailable handles this case with default header values.

The server is up, but overloaded with requests. Try again later.
*/
type PostEburyServiceUnavailable struct {
	Payload *models.APIError
}

func (o *PostEburyServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /ebury][%d] postEburyServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostEburyServiceUnavailable) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PostEburyServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
