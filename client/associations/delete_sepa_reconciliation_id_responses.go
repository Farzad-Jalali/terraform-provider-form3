// Code generated by go-swagger; DO NOT EDIT.

package associations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/terraform-provider-form3/models"
)

// DeleteSepaReconciliationIDReader is a Reader for the DeleteSepaReconciliationID structure.
type DeleteSepaReconciliationIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSepaReconciliationIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteSepaReconciliationIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteSepaReconciliationIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteSepaReconciliationIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteSepaReconciliationIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteSepaReconciliationIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteSepaReconciliationIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteSepaReconciliationIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteSepaReconciliationIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteSepaReconciliationIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteSepaReconciliationIDNoContent creates a DeleteSepaReconciliationIDNoContent with default headers values
func NewDeleteSepaReconciliationIDNoContent() *DeleteSepaReconciliationIDNoContent {
	return &DeleteSepaReconciliationIDNoContent{}
}

/*DeleteSepaReconciliationIDNoContent handles this case with default header values.

Association deleted
*/
type DeleteSepaReconciliationIDNoContent struct {
}

func (o *DeleteSepaReconciliationIDNoContent) Error() string {
	return fmt.Sprintf("[DELETE /sepa-reconciliation/{id}][%d] deleteSepaReconciliationIdNoContent ", 204)
}

func (o *DeleteSepaReconciliationIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSepaReconciliationIDBadRequest creates a DeleteSepaReconciliationIDBadRequest with default headers values
func NewDeleteSepaReconciliationIDBadRequest() *DeleteSepaReconciliationIDBadRequest {
	return &DeleteSepaReconciliationIDBadRequest{}
}

/*DeleteSepaReconciliationIDBadRequest handles this case with default header values.

Bad Request
*/
type DeleteSepaReconciliationIDBadRequest struct {
	Payload *models.APIError
}

func (o *DeleteSepaReconciliationIDBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /sepa-reconciliation/{id}][%d] deleteSepaReconciliationIdBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteSepaReconciliationIDBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteSepaReconciliationIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSepaReconciliationIDUnauthorized creates a DeleteSepaReconciliationIDUnauthorized with default headers values
func NewDeleteSepaReconciliationIDUnauthorized() *DeleteSepaReconciliationIDUnauthorized {
	return &DeleteSepaReconciliationIDUnauthorized{}
}

/*DeleteSepaReconciliationIDUnauthorized handles this case with default header values.

Authentication credentials were missing or incorrect
*/
type DeleteSepaReconciliationIDUnauthorized struct {
	Payload *models.APIError
}

func (o *DeleteSepaReconciliationIDUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /sepa-reconciliation/{id}][%d] deleteSepaReconciliationIdUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteSepaReconciliationIDUnauthorized) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteSepaReconciliationIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSepaReconciliationIDForbidden creates a DeleteSepaReconciliationIDForbidden with default headers values
func NewDeleteSepaReconciliationIDForbidden() *DeleteSepaReconciliationIDForbidden {
	return &DeleteSepaReconciliationIDForbidden{}
}

/*DeleteSepaReconciliationIDForbidden handles this case with default header values.

Forbidden
*/
type DeleteSepaReconciliationIDForbidden struct {
	Payload *models.APIError
}

func (o *DeleteSepaReconciliationIDForbidden) Error() string {
	return fmt.Sprintf("[DELETE /sepa-reconciliation/{id}][%d] deleteSepaReconciliationIdForbidden  %+v", 403, o.Payload)
}

func (o *DeleteSepaReconciliationIDForbidden) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteSepaReconciliationIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSepaReconciliationIDNotFound creates a DeleteSepaReconciliationIDNotFound with default headers values
func NewDeleteSepaReconciliationIDNotFound() *DeleteSepaReconciliationIDNotFound {
	return &DeleteSepaReconciliationIDNotFound{}
}

/*DeleteSepaReconciliationIDNotFound handles this case with default header values.

Record not found
*/
type DeleteSepaReconciliationIDNotFound struct {
	Payload *models.APIError
}

func (o *DeleteSepaReconciliationIDNotFound) Error() string {
	return fmt.Sprintf("[DELETE /sepa-reconciliation/{id}][%d] deleteSepaReconciliationIdNotFound  %+v", 404, o.Payload)
}

func (o *DeleteSepaReconciliationIDNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteSepaReconciliationIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSepaReconciliationIDConflict creates a DeleteSepaReconciliationIDConflict with default headers values
func NewDeleteSepaReconciliationIDConflict() *DeleteSepaReconciliationIDConflict {
	return &DeleteSepaReconciliationIDConflict{}
}

/*DeleteSepaReconciliationIDConflict handles this case with default header values.

Conflict
*/
type DeleteSepaReconciliationIDConflict struct {
	Payload *models.APIError
}

func (o *DeleteSepaReconciliationIDConflict) Error() string {
	return fmt.Sprintf("[DELETE /sepa-reconciliation/{id}][%d] deleteSepaReconciliationIdConflict  %+v", 409, o.Payload)
}

func (o *DeleteSepaReconciliationIDConflict) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteSepaReconciliationIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSepaReconciliationIDTooManyRequests creates a DeleteSepaReconciliationIDTooManyRequests with default headers values
func NewDeleteSepaReconciliationIDTooManyRequests() *DeleteSepaReconciliationIDTooManyRequests {
	return &DeleteSepaReconciliationIDTooManyRequests{}
}

/*DeleteSepaReconciliationIDTooManyRequests handles this case with default header values.

The request cannot be served due to the applicationâ€™s rate limit
*/
type DeleteSepaReconciliationIDTooManyRequests struct {
	Payload *models.APIError
}

func (o *DeleteSepaReconciliationIDTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /sepa-reconciliation/{id}][%d] deleteSepaReconciliationIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteSepaReconciliationIDTooManyRequests) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteSepaReconciliationIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSepaReconciliationIDInternalServerError creates a DeleteSepaReconciliationIDInternalServerError with default headers values
func NewDeleteSepaReconciliationIDInternalServerError() *DeleteSepaReconciliationIDInternalServerError {
	return &DeleteSepaReconciliationIDInternalServerError{}
}

/*DeleteSepaReconciliationIDInternalServerError handles this case with default header values.

Internal Server Error
*/
type DeleteSepaReconciliationIDInternalServerError struct {
	Payload *models.APIError
}

func (o *DeleteSepaReconciliationIDInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /sepa-reconciliation/{id}][%d] deleteSepaReconciliationIdInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteSepaReconciliationIDInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteSepaReconciliationIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSepaReconciliationIDServiceUnavailable creates a DeleteSepaReconciliationIDServiceUnavailable with default headers values
func NewDeleteSepaReconciliationIDServiceUnavailable() *DeleteSepaReconciliationIDServiceUnavailable {
	return &DeleteSepaReconciliationIDServiceUnavailable{}
}

/*DeleteSepaReconciliationIDServiceUnavailable handles this case with default header values.

The server is up, but overloaded with requests. Try again later.
*/
type DeleteSepaReconciliationIDServiceUnavailable struct {
	Payload *models.APIError
}

func (o *DeleteSepaReconciliationIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /sepa-reconciliation/{id}][%d] deleteSepaReconciliationIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteSepaReconciliationIDServiceUnavailable) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteSepaReconciliationIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
