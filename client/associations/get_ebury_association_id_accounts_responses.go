// Code generated by go-swagger; DO NOT EDIT.

package associations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/terraform-provider-form3/models"
)

// GetEburyAssociationIDAccountsReader is a Reader for the GetEburyAssociationIDAccounts structure.
type GetEburyAssociationIDAccountsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEburyAssociationIDAccountsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEburyAssociationIDAccountsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetEburyAssociationIDAccountsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetEburyAssociationIDAccountsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetEburyAssociationIDAccountsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetEburyAssociationIDAccountsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetEburyAssociationIDAccountsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetEburyAssociationIDAccountsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetEburyAssociationIDAccountsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetEburyAssociationIDAccountsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetEburyAssociationIDAccountsOK creates a GetEburyAssociationIDAccountsOK with default headers values
func NewGetEburyAssociationIDAccountsOK() *GetEburyAssociationIDAccountsOK {
	return &GetEburyAssociationIDAccountsOK{}
}

/*GetEburyAssociationIDAccountsOK handles this case with default header values.

List of ebury association accounts
*/
type GetEburyAssociationIDAccountsOK struct {
	Payload *models.EburyAssociationAccountListResponse
}

func (o *GetEburyAssociationIDAccountsOK) Error() string {
	return fmt.Sprintf("[GET /ebury/{association_id}/accounts][%d] getEburyAssociationIdAccountsOK  %+v", 200, o.Payload)
}

func (o *GetEburyAssociationIDAccountsOK) GetPayload() *models.EburyAssociationAccountListResponse {
	return o.Payload
}

func (o *GetEburyAssociationIDAccountsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EburyAssociationAccountListResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEburyAssociationIDAccountsBadRequest creates a GetEburyAssociationIDAccountsBadRequest with default headers values
func NewGetEburyAssociationIDAccountsBadRequest() *GetEburyAssociationIDAccountsBadRequest {
	return &GetEburyAssociationIDAccountsBadRequest{}
}

/*GetEburyAssociationIDAccountsBadRequest handles this case with default header values.

Bad Request
*/
type GetEburyAssociationIDAccountsBadRequest struct {
	Payload *models.APIError
}

func (o *GetEburyAssociationIDAccountsBadRequest) Error() string {
	return fmt.Sprintf("[GET /ebury/{association_id}/accounts][%d] getEburyAssociationIdAccountsBadRequest  %+v", 400, o.Payload)
}

func (o *GetEburyAssociationIDAccountsBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetEburyAssociationIDAccountsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEburyAssociationIDAccountsUnauthorized creates a GetEburyAssociationIDAccountsUnauthorized with default headers values
func NewGetEburyAssociationIDAccountsUnauthorized() *GetEburyAssociationIDAccountsUnauthorized {
	return &GetEburyAssociationIDAccountsUnauthorized{}
}

/*GetEburyAssociationIDAccountsUnauthorized handles this case with default header values.

Authentication credentials were missing or incorrect
*/
type GetEburyAssociationIDAccountsUnauthorized struct {
	Payload *models.APIError
}

func (o *GetEburyAssociationIDAccountsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /ebury/{association_id}/accounts][%d] getEburyAssociationIdAccountsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetEburyAssociationIDAccountsUnauthorized) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetEburyAssociationIDAccountsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEburyAssociationIDAccountsForbidden creates a GetEburyAssociationIDAccountsForbidden with default headers values
func NewGetEburyAssociationIDAccountsForbidden() *GetEburyAssociationIDAccountsForbidden {
	return &GetEburyAssociationIDAccountsForbidden{}
}

/*GetEburyAssociationIDAccountsForbidden handles this case with default header values.

Forbidden
*/
type GetEburyAssociationIDAccountsForbidden struct {
	Payload *models.APIError
}

func (o *GetEburyAssociationIDAccountsForbidden) Error() string {
	return fmt.Sprintf("[GET /ebury/{association_id}/accounts][%d] getEburyAssociationIdAccountsForbidden  %+v", 403, o.Payload)
}

func (o *GetEburyAssociationIDAccountsForbidden) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetEburyAssociationIDAccountsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEburyAssociationIDAccountsNotFound creates a GetEburyAssociationIDAccountsNotFound with default headers values
func NewGetEburyAssociationIDAccountsNotFound() *GetEburyAssociationIDAccountsNotFound {
	return &GetEburyAssociationIDAccountsNotFound{}
}

/*GetEburyAssociationIDAccountsNotFound handles this case with default header values.

Record not found
*/
type GetEburyAssociationIDAccountsNotFound struct {
	Payload *models.APIError
}

func (o *GetEburyAssociationIDAccountsNotFound) Error() string {
	return fmt.Sprintf("[GET /ebury/{association_id}/accounts][%d] getEburyAssociationIdAccountsNotFound  %+v", 404, o.Payload)
}

func (o *GetEburyAssociationIDAccountsNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetEburyAssociationIDAccountsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEburyAssociationIDAccountsConflict creates a GetEburyAssociationIDAccountsConflict with default headers values
func NewGetEburyAssociationIDAccountsConflict() *GetEburyAssociationIDAccountsConflict {
	return &GetEburyAssociationIDAccountsConflict{}
}

/*GetEburyAssociationIDAccountsConflict handles this case with default header values.

Conflict
*/
type GetEburyAssociationIDAccountsConflict struct {
	Payload *models.APIError
}

func (o *GetEburyAssociationIDAccountsConflict) Error() string {
	return fmt.Sprintf("[GET /ebury/{association_id}/accounts][%d] getEburyAssociationIdAccountsConflict  %+v", 409, o.Payload)
}

func (o *GetEburyAssociationIDAccountsConflict) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetEburyAssociationIDAccountsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEburyAssociationIDAccountsTooManyRequests creates a GetEburyAssociationIDAccountsTooManyRequests with default headers values
func NewGetEburyAssociationIDAccountsTooManyRequests() *GetEburyAssociationIDAccountsTooManyRequests {
	return &GetEburyAssociationIDAccountsTooManyRequests{}
}

/*GetEburyAssociationIDAccountsTooManyRequests handles this case with default header values.

The request cannot be served due to the applicationâ€™s rate limit
*/
type GetEburyAssociationIDAccountsTooManyRequests struct {
	Payload *models.APIError
}

func (o *GetEburyAssociationIDAccountsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /ebury/{association_id}/accounts][%d] getEburyAssociationIdAccountsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetEburyAssociationIDAccountsTooManyRequests) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetEburyAssociationIDAccountsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEburyAssociationIDAccountsInternalServerError creates a GetEburyAssociationIDAccountsInternalServerError with default headers values
func NewGetEburyAssociationIDAccountsInternalServerError() *GetEburyAssociationIDAccountsInternalServerError {
	return &GetEburyAssociationIDAccountsInternalServerError{}
}

/*GetEburyAssociationIDAccountsInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetEburyAssociationIDAccountsInternalServerError struct {
	Payload *models.APIError
}

func (o *GetEburyAssociationIDAccountsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /ebury/{association_id}/accounts][%d] getEburyAssociationIdAccountsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetEburyAssociationIDAccountsInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetEburyAssociationIDAccountsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEburyAssociationIDAccountsServiceUnavailable creates a GetEburyAssociationIDAccountsServiceUnavailable with default headers values
func NewGetEburyAssociationIDAccountsServiceUnavailable() *GetEburyAssociationIDAccountsServiceUnavailable {
	return &GetEburyAssociationIDAccountsServiceUnavailable{}
}

/*GetEburyAssociationIDAccountsServiceUnavailable handles this case with default header values.

The server is up, but overloaded with requests. Try again later.
*/
type GetEburyAssociationIDAccountsServiceUnavailable struct {
	Payload *models.APIError
}

func (o *GetEburyAssociationIDAccountsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /ebury/{association_id}/accounts][%d] getEburyAssociationIdAccountsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetEburyAssociationIDAccountsServiceUnavailable) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetEburyAssociationIDAccountsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
