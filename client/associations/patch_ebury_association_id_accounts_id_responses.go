// Code generated by go-swagger; DO NOT EDIT.

package associations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/terraform-provider-form3/models"
)

// PatchEburyAssociationIDAccountsIDReader is a Reader for the PatchEburyAssociationIDAccountsID structure.
type PatchEburyAssociationIDAccountsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchEburyAssociationIDAccountsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchEburyAssociationIDAccountsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchEburyAssociationIDAccountsIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchEburyAssociationIDAccountsIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchEburyAssociationIDAccountsIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchEburyAssociationIDAccountsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchEburyAssociationIDAccountsIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchEburyAssociationIDAccountsIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchEburyAssociationIDAccountsIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchEburyAssociationIDAccountsIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchEburyAssociationIDAccountsIDOK creates a PatchEburyAssociationIDAccountsIDOK with default headers values
func NewPatchEburyAssociationIDAccountsIDOK() *PatchEburyAssociationIDAccountsIDOK {
	return &PatchEburyAssociationIDAccountsIDOK{}
}

/*PatchEburyAssociationIDAccountsIDOK handles this case with default header values.

Association updated successfully
*/
type PatchEburyAssociationIDAccountsIDOK struct {
	Payload *models.EburyAssociationAccountResponse
}

func (o *PatchEburyAssociationIDAccountsIDOK) Error() string {
	return fmt.Sprintf("[PATCH /ebury/{association_id}/accounts/{id}][%d] patchEburyAssociationIdAccountsIdOK  %+v", 200, o.Payload)
}

func (o *PatchEburyAssociationIDAccountsIDOK) GetPayload() *models.EburyAssociationAccountResponse {
	return o.Payload
}

func (o *PatchEburyAssociationIDAccountsIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EburyAssociationAccountResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchEburyAssociationIDAccountsIDBadRequest creates a PatchEburyAssociationIDAccountsIDBadRequest with default headers values
func NewPatchEburyAssociationIDAccountsIDBadRequest() *PatchEburyAssociationIDAccountsIDBadRequest {
	return &PatchEburyAssociationIDAccountsIDBadRequest{}
}

/*PatchEburyAssociationIDAccountsIDBadRequest handles this case with default header values.

Bad Request
*/
type PatchEburyAssociationIDAccountsIDBadRequest struct {
	Payload *models.APIError
}

func (o *PatchEburyAssociationIDAccountsIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /ebury/{association_id}/accounts/{id}][%d] patchEburyAssociationIdAccountsIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchEburyAssociationIDAccountsIDBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PatchEburyAssociationIDAccountsIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchEburyAssociationIDAccountsIDUnauthorized creates a PatchEburyAssociationIDAccountsIDUnauthorized with default headers values
func NewPatchEburyAssociationIDAccountsIDUnauthorized() *PatchEburyAssociationIDAccountsIDUnauthorized {
	return &PatchEburyAssociationIDAccountsIDUnauthorized{}
}

/*PatchEburyAssociationIDAccountsIDUnauthorized handles this case with default header values.

Authentication credentials were missing or incorrect
*/
type PatchEburyAssociationIDAccountsIDUnauthorized struct {
	Payload *models.APIError
}

func (o *PatchEburyAssociationIDAccountsIDUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /ebury/{association_id}/accounts/{id}][%d] patchEburyAssociationIdAccountsIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchEburyAssociationIDAccountsIDUnauthorized) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PatchEburyAssociationIDAccountsIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchEburyAssociationIDAccountsIDForbidden creates a PatchEburyAssociationIDAccountsIDForbidden with default headers values
func NewPatchEburyAssociationIDAccountsIDForbidden() *PatchEburyAssociationIDAccountsIDForbidden {
	return &PatchEburyAssociationIDAccountsIDForbidden{}
}

/*PatchEburyAssociationIDAccountsIDForbidden handles this case with default header values.

Forbidden
*/
type PatchEburyAssociationIDAccountsIDForbidden struct {
	Payload *models.APIError
}

func (o *PatchEburyAssociationIDAccountsIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /ebury/{association_id}/accounts/{id}][%d] patchEburyAssociationIdAccountsIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchEburyAssociationIDAccountsIDForbidden) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PatchEburyAssociationIDAccountsIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchEburyAssociationIDAccountsIDNotFound creates a PatchEburyAssociationIDAccountsIDNotFound with default headers values
func NewPatchEburyAssociationIDAccountsIDNotFound() *PatchEburyAssociationIDAccountsIDNotFound {
	return &PatchEburyAssociationIDAccountsIDNotFound{}
}

/*PatchEburyAssociationIDAccountsIDNotFound handles this case with default header values.

Record not found
*/
type PatchEburyAssociationIDAccountsIDNotFound struct {
	Payload *models.APIError
}

func (o *PatchEburyAssociationIDAccountsIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /ebury/{association_id}/accounts/{id}][%d] patchEburyAssociationIdAccountsIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchEburyAssociationIDAccountsIDNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PatchEburyAssociationIDAccountsIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchEburyAssociationIDAccountsIDConflict creates a PatchEburyAssociationIDAccountsIDConflict with default headers values
func NewPatchEburyAssociationIDAccountsIDConflict() *PatchEburyAssociationIDAccountsIDConflict {
	return &PatchEburyAssociationIDAccountsIDConflict{}
}

/*PatchEburyAssociationIDAccountsIDConflict handles this case with default header values.

Conflict
*/
type PatchEburyAssociationIDAccountsIDConflict struct {
	Payload *models.APIError
}

func (o *PatchEburyAssociationIDAccountsIDConflict) Error() string {
	return fmt.Sprintf("[PATCH /ebury/{association_id}/accounts/{id}][%d] patchEburyAssociationIdAccountsIdConflict  %+v", 409, o.Payload)
}

func (o *PatchEburyAssociationIDAccountsIDConflict) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PatchEburyAssociationIDAccountsIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchEburyAssociationIDAccountsIDTooManyRequests creates a PatchEburyAssociationIDAccountsIDTooManyRequests with default headers values
func NewPatchEburyAssociationIDAccountsIDTooManyRequests() *PatchEburyAssociationIDAccountsIDTooManyRequests {
	return &PatchEburyAssociationIDAccountsIDTooManyRequests{}
}

/*PatchEburyAssociationIDAccountsIDTooManyRequests handles this case with default header values.

The request cannot be served due to the applicationâ€™s rate limit
*/
type PatchEburyAssociationIDAccountsIDTooManyRequests struct {
	Payload *models.APIError
}

func (o *PatchEburyAssociationIDAccountsIDTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /ebury/{association_id}/accounts/{id}][%d] patchEburyAssociationIdAccountsIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchEburyAssociationIDAccountsIDTooManyRequests) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PatchEburyAssociationIDAccountsIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchEburyAssociationIDAccountsIDInternalServerError creates a PatchEburyAssociationIDAccountsIDInternalServerError with default headers values
func NewPatchEburyAssociationIDAccountsIDInternalServerError() *PatchEburyAssociationIDAccountsIDInternalServerError {
	return &PatchEburyAssociationIDAccountsIDInternalServerError{}
}

/*PatchEburyAssociationIDAccountsIDInternalServerError handles this case with default header values.

Internal Server Error
*/
type PatchEburyAssociationIDAccountsIDInternalServerError struct {
	Payload *models.APIError
}

func (o *PatchEburyAssociationIDAccountsIDInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /ebury/{association_id}/accounts/{id}][%d] patchEburyAssociationIdAccountsIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchEburyAssociationIDAccountsIDInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PatchEburyAssociationIDAccountsIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchEburyAssociationIDAccountsIDServiceUnavailable creates a PatchEburyAssociationIDAccountsIDServiceUnavailable with default headers values
func NewPatchEburyAssociationIDAccountsIDServiceUnavailable() *PatchEburyAssociationIDAccountsIDServiceUnavailable {
	return &PatchEburyAssociationIDAccountsIDServiceUnavailable{}
}

/*PatchEburyAssociationIDAccountsIDServiceUnavailable handles this case with default header values.

The server is up, but overloaded with requests. Try again later.
*/
type PatchEburyAssociationIDAccountsIDServiceUnavailable struct {
	Payload *models.APIError
}

func (o *PatchEburyAssociationIDAccountsIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /ebury/{association_id}/accounts/{id}][%d] patchEburyAssociationIdAccountsIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchEburyAssociationIDAccountsIDServiceUnavailable) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PatchEburyAssociationIDAccountsIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
