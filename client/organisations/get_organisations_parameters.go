// Code generated by go-swagger; DO NOT EDIT.

package organisations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetOrganisationsParams creates a new GetOrganisationsParams object
// with the default values initialized.
func NewGetOrganisationsParams() *GetOrganisationsParams {
	var ()
	return &GetOrganisationsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetOrganisationsParamsWithTimeout creates a new GetOrganisationsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetOrganisationsParamsWithTimeout(timeout time.Duration) *GetOrganisationsParams {
	var ()
	return &GetOrganisationsParams{

		timeout: timeout,
	}
}

// NewGetOrganisationsParamsWithContext creates a new GetOrganisationsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetOrganisationsParamsWithContext(ctx context.Context) *GetOrganisationsParams {
	var ()
	return &GetOrganisationsParams{

		Context: ctx,
	}
}

// NewGetOrganisationsParamsWithHTTPClient creates a new GetOrganisationsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetOrganisationsParamsWithHTTPClient(client *http.Client) *GetOrganisationsParams {
	var ()
	return &GetOrganisationsParams{
		HTTPClient: client,
	}
}

/*GetOrganisationsParams contains all the parameters to send to the API endpoint
for the get organisations operation typically these are written to a http.Request
*/
type GetOrganisationsParams struct {

	/*FilterChildOrganisationID
	  Child org id

	*/
	FilterChildOrganisationID *strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get organisations params
func (o *GetOrganisationsParams) WithTimeout(timeout time.Duration) *GetOrganisationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get organisations params
func (o *GetOrganisationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get organisations params
func (o *GetOrganisationsParams) WithContext(ctx context.Context) *GetOrganisationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get organisations params
func (o *GetOrganisationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get organisations params
func (o *GetOrganisationsParams) WithHTTPClient(client *http.Client) *GetOrganisationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get organisations params
func (o *GetOrganisationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilterChildOrganisationID adds the filterChildOrganisationID to the get organisations params
func (o *GetOrganisationsParams) WithFilterChildOrganisationID(filterChildOrganisationID *strfmt.UUID) *GetOrganisationsParams {
	o.SetFilterChildOrganisationID(filterChildOrganisationID)
	return o
}

// SetFilterChildOrganisationID adds the filterChildOrganisationId to the get organisations params
func (o *GetOrganisationsParams) SetFilterChildOrganisationID(filterChildOrganisationID *strfmt.UUID) {
	o.FilterChildOrganisationID = filterChildOrganisationID
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrganisationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilterChildOrganisationID != nil {

		// query param filter[child_organisation_id]
		var qrFilterChildOrganisationID strfmt.UUID
		if o.FilterChildOrganisationID != nil {
			qrFilterChildOrganisationID = *o.FilterChildOrganisationID
		}
		qFilterChildOrganisationID := qrFilterChildOrganisationID.String()
		if qFilterChildOrganisationID != "" {
			if err := r.SetQueryParam("filter[child_organisation_id]", qFilterChildOrganisationID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
