// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new system API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for system API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteVocalinkreportCertificateRequestsCertificateRequestID deletes certificate request
*/
func (a *Client) DeleteVocalinkreportCertificateRequestsCertificateRequestID(params *DeleteVocalinkreportCertificateRequestsCertificateRequestIDParams) (*DeleteVocalinkreportCertificateRequestsCertificateRequestIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVocalinkreportCertificateRequestsCertificateRequestIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVocalinkreportCertificateRequestsCertificateRequestID",
		Method:             "DELETE",
		PathPattern:        "/vocalinkreport/certificate_requests/{certificate_request_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVocalinkreportCertificateRequestsCertificateRequestIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVocalinkreportCertificateRequestsCertificateRequestIDNoContent), nil

}

/*
DeleteVocalinkreportCertificateRequestsCertificateRequestIDCertificateCertificateID deletes certificate
*/
func (a *Client) DeleteVocalinkreportCertificateRequestsCertificateRequestIDCertificateCertificateID(params *DeleteVocalinkreportCertificateRequestsCertificateRequestIDCertificateCertificateIDParams) (*DeleteVocalinkreportCertificateRequestsCertificateRequestIDCertificateCertificateIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVocalinkreportCertificateRequestsCertificateRequestIDCertificateCertificateIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVocalinkreportCertificateRequestsCertificateRequestIDCertificateCertificateID",
		Method:             "DELETE",
		PathPattern:        "/vocalinkreport/certificate_requests/{certificate_request_id}/certificate/{certificate_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVocalinkreportCertificateRequestsCertificateRequestIDCertificateCertificateIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVocalinkreportCertificateRequestsCertificateRequestIDCertificateCertificateIDNoContent), nil

}

/*
GetVocalinkreportCertificateRequests lists all certificate requests
*/
func (a *Client) GetVocalinkreportCertificateRequests(params *GetVocalinkreportCertificateRequestsParams) (*GetVocalinkreportCertificateRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVocalinkreportCertificateRequestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVocalinkreportCertificateRequests",
		Method:             "GET",
		PathPattern:        "/vocalinkreport/certificate_requests",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVocalinkreportCertificateRequestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVocalinkreportCertificateRequestsOK), nil

}

/*
GetVocalinkreportCertificateRequestsCertificateRequestID fetches certificate request
*/
func (a *Client) GetVocalinkreportCertificateRequestsCertificateRequestID(params *GetVocalinkreportCertificateRequestsCertificateRequestIDParams) (*GetVocalinkreportCertificateRequestsCertificateRequestIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVocalinkreportCertificateRequestsCertificateRequestIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVocalinkreportCertificateRequestsCertificateRequestID",
		Method:             "GET",
		PathPattern:        "/vocalinkreport/certificate_requests/{certificate_request_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVocalinkreportCertificateRequestsCertificateRequestIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVocalinkreportCertificateRequestsCertificateRequestIDOK), nil

}

/*
GetVocalinkreportCertificateRequestsCertificateRequestIDCertificate lists all certificates
*/
func (a *Client) GetVocalinkreportCertificateRequestsCertificateRequestIDCertificate(params *GetVocalinkreportCertificateRequestsCertificateRequestIDCertificateParams) (*GetVocalinkreportCertificateRequestsCertificateRequestIDCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVocalinkreportCertificateRequestsCertificateRequestIDCertificateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVocalinkreportCertificateRequestsCertificateRequestIDCertificate",
		Method:             "GET",
		PathPattern:        "/vocalinkreport/certificate_requests/{certificate_request_id}/certificate",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVocalinkreportCertificateRequestsCertificateRequestIDCertificateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVocalinkreportCertificateRequestsCertificateRequestIDCertificateOK), nil

}

/*
GetVocalinkreportCertificateRequestsCertificateRequestIDCertificateCertificateID fetches certificate
*/
func (a *Client) GetVocalinkreportCertificateRequestsCertificateRequestIDCertificateCertificateID(params *GetVocalinkreportCertificateRequestsCertificateRequestIDCertificateCertificateIDParams) (*GetVocalinkreportCertificateRequestsCertificateRequestIDCertificateCertificateIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVocalinkreportCertificateRequestsCertificateRequestIDCertificateCertificateIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVocalinkreportCertificateRequestsCertificateRequestIDCertificateCertificateID",
		Method:             "GET",
		PathPattern:        "/vocalinkreport/certificate_requests/{certificate_request_id}/certificate/{certificate_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVocalinkreportCertificateRequestsCertificateRequestIDCertificateCertificateIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVocalinkreportCertificateRequestsCertificateRequestIDCertificateCertificateIDOK), nil

}

/*
PostVocalinkreportCertificateRequests creates certificate request
*/
func (a *Client) PostVocalinkreportCertificateRequests(params *PostVocalinkreportCertificateRequestsParams) (*PostVocalinkreportCertificateRequestsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVocalinkreportCertificateRequestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVocalinkreportCertificateRequests",
		Method:             "POST",
		PathPattern:        "/vocalinkreport/certificate_requests",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostVocalinkreportCertificateRequestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostVocalinkreportCertificateRequestsCreated), nil

}

/*
PostVocalinkreportCertificateRequestsCertificateRequestIDCertificate creates certificate
*/
func (a *Client) PostVocalinkreportCertificateRequestsCertificateRequestIDCertificate(params *PostVocalinkreportCertificateRequestsCertificateRequestIDCertificateParams) (*PostVocalinkreportCertificateRequestsCertificateRequestIDCertificateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVocalinkreportCertificateRequestsCertificateRequestIDCertificateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVocalinkreportCertificateRequestsCertificateRequestIDCertificate",
		Method:             "POST",
		PathPattern:        "/vocalinkreport/certificate_requests/{certificate_request_id}/certificate",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostVocalinkreportCertificateRequestsCertificateRequestIDCertificateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostVocalinkreportCertificateRequestsCertificateRequestIDCertificateCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
